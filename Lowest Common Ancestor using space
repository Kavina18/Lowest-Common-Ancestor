/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public boolean rootToLeafPath(TreeNode root, TreeNode target,ArrayList<TreeNode> arr){

        if(root == null) return false;

        if(root == target) {
            arr.add(root);
            return true;
        }

        boolean left = rootToLeafPath(root.left,target,arr);

        if(left){
            arr.add(root);
            return true;
        }

        boolean right = rootToLeafPath(root.right,target,arr);

        if(right){
            arr.add(root);
            return true;
        }
        
        return false;
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        ArrayList<TreeNode> l1 = new ArrayList<>();
        ArrayList<TreeNode> l2 = new ArrayList<>();

        rootToLeafPath(root,p,l1);
        rootToLeafPath(root,q,l2);

        int i=l1.size()-1;
        int j=l2.size()-1;

        while(i >= 0 && j >= 0){
            if(l1.get(i) == l2.get(j)){
                i--;
                j--;
            }
            else break;
        }
        return l1.get(i+1);
    }
}
